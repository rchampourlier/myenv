set nocompatible

" Disable .swp files
set noswapfile

" Load plugins
""""""""""""""
call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'
Plug 'mileszs/ack.vim'

" for go
Plug 'fatih/vim-go'
Plug 'vim-jp/vim-go-extra' " for :Fmt
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
"
" for elm
Plug 'elmcast/elm-vim'

call plug#end()

" Tabs & indentation
set expandtab
set shiftwidth=2
set softtabstop=2

" Tabs & indentation for Golang
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8
autocmd FileType go setlocal noexpandtab

" Solarized theme
"""""""""""""""""
syntax enable
set background=dark
colorscheme solarized

" Syntax coloration
"""""""""""""""""""
" Golang
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Key bindings
""""""""""""""

" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
" The mapleader has to be set before vundle starts loading all 
" the plugins.
let mapleader=","

" Key bindings - Search files
nnoremap <silent> <leader>f :FZF<CR>"

" Key bindings - NERDtree
nmap <leader>n :NERDTreeToggle<cr>

" Key bindings - Misc

" escapes from insert mode
imap jk <esc>
imap kj <esc>
imap <C-s> <esc>:w<cr>

" Bind `t` to go to topic in help files
autocmd Filetype help nnoremap t <C-]>
autocmd Filetype help nnoremap <buffer> q :q<CR>

" Plugins config
""""""""""""""""

" Plugin - lightline
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'readonly': 'MyReadonly',
      \   'filename': 'MyFilename',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤ "
  else
    return ""
  endif
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
       \ ('' != expand('%') ? expand('%') : '[NoName]')
endfunction

" Use status bar even with single buffer
set laststatus=2

" Plugin - vim.ack
" Using ag instead of Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep --smart-case'
endif
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

" Plugin - ale
" enable 'go build' linter
let g:ale_linters = {'go': ['golint', 'gofmt', 'go vet', 'go build']}

" Plugin - elm-vim
" enable elm-format on save
let g:elm_format_autosave = 1
